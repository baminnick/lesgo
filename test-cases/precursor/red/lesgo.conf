!!
!!  Copyright (C) 2011-2013  Johns Hopkins University
!!
!!  This file is part of lesgo.
!!
!!  lesgo is free software: you can redistribute it and/or modify
!!  it under the terms of the GNU General Public License as published by
!!  the Free Software Foundation, either version 3 of the License, or
!!  (at your option) any later version.
!!
!!  lesgo is distributed in the hope that it will be useful,
!!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!!  GNU General Public License for more details.
!!
!!  You should have received a copy of the GNU General Public License
!!  along with lesgo.  If not, see <http://www.gnu.org/licenses/>.
!!


! Input file for lesgo
! 
! All lines beginning with '!' are comments All entries 
! are not case sensitive. Data blocks must begin with 
! '{' and end with '}'; the block name must be on the 
! same line as the entry bracket '{'.
!
! Be sure to preserve the order of the data blocks as some depend on
! others during the read-in process
!

! Domain parameters
DOMAIN {

  ! Specify the number of processors to use (this is mainly to add
  ! compliance with other preprocessing programs) 
  nproc = 4 
 
  Nx = 192
  Ny = 32
  ! Total grid size (stored as nz_tot)
  Nz = 37

  ! Dimensional length scale [m]:
  z_i = 0.45

  ! Non-dimensional domain length
  Lx = 12.0
  Ly = 2.0
  Lz = 1.0
  ! Specify whether to enforce uniform grid spacing.  
  ! If .true. Ly and Lz will be determined to enforce dx=dy=dz based on
  ! Ny and Nz.
  ! NOTE: uniform spacing is required when using level set
  uniform_spacing = .false.
 
}

! Model parameters
MODEL {

  ! Model type: 1->Smagorinsky; 2->Dynamic; 3->Scale dependent
  !             4->Lagrangian scale-sim   5-> Lagragian scale-dep
  sgs_model = 5
  ! Wall damping exponent for Mason model (default 2)
  wall_damp_exp = 2

  ! Timesteps between dynamic Cs updates
  cs_count = 5

  ! When to start dynamic Cs calculations
  dyn_init = 100

  ! Co used in the Mason model for Smagorisky coefficient
  Co = 0.16

  ! Test filter type: 1->cut off 2->Gaussian 3->Top-hat
  ifilter = 1

  ! Dimensional velocity scale (friction velocity) [m/s] 
  ! u_star is used if coriolis_forcing=.FALSE. and ug is used if
  ! coriolis_forcing=.TRUE.
  u_star = 0.1056

  ! von Karman constant  
  vonk = 0.4
  
  ! Coriolis forcing
  ! coriol -> non-dimensional coriolis parameter
  ! ug -> horizontal geostrophic velocity
  ! vg -> transverse geostrophic velocity
  coriolis_forcing = .false.
  coriol = 0.0001
  ug = 1.0
  vg = 0.0

  ! Viscosity models
  sgs = .true. 
  molec = .false. 
  dns_bc = .false.

  ! Dimensional molecular viscosity [m^2/s]
  nu_molec = 1.14e-5
  
}

TIME {

  ! Number of time steps to run simulation
  nsteps = 500

  ! Specify the allowed runtime in seconds; simulation will exit if exceeded.
  ! This will only account for time loop, not initialization or finalization.
  ! To disable set < 0
  runtime = -1

  ! Specify CFL based dynamic time stepping (.true.)
  use_cfl_dt = .true.
  ! only used if use_cfl_dt=.true.
  cfl = 0.0625

  ! Set static time step
  ! only used if use_cfl_dt=.false.
  dt = 2.0e-4

  ! Use cumulative time across multiple simulations
  cumulative_time = .false. 

}

! Output parameters
FLOW_COND {

  ! Lower boundary condition:  0 - stress free, 1 - wall
  ! NOTE: the upper boundary condition is implicitly stress free
  lbc_mom = 1
  
  !note: ONLY activate integral wall model when lbc_mom = 1!
  iwm_active = 0

  ! Lower boundary condition, roughness length (non-dimensional)
  zo = 6.66667e-5

  ! Use forced inflow
  inflow = .false.
  ! If inflow is true the following should be set:
  ! position of right end of fringe region, as a fraction of L_x
  fringe_region_end = 1.0
  ! length of fringe region as a fraction of L_x
  fringe_region_len = 0.125
  ! Specify uniform inflow velocity (only used if USE_CPS=no in Makefile.in)
  inflow_velocity = 1.0

  ! Use mean pressure forcing
  use_mean_p_force = .true.
  ! Evalute mean pressure force. This will compute it as 1/Lz
  ! It may be good idea to put .true. if uniform_spacing = .true.
  ! If .true. the setting for mean_p_force will be overridden.
  eval_mean_p_force = .true.
  ! Specify mean pressure forcing (Typically 1/Lz) 
  ! non-dimensional
  mean_p_force_x = 1.0
  mean_p_force_y = 0.0

}

! Solver parameters
OUTPUT {
  
  ! Specify how often to display simulation update
  wbase = 100

  ! Specify of often to write KE to check_ke.out
  nenergy = 100

  ! Specify how often to display Lagrangian CFL condition of dynamic SGS
  ! models
  lag_cfl_count = 1000

  ! Turn on checkpointing restart data at intermediate time steps
  checkpoint_data = .false.
  ! Number of time steps to skip between checkpoints
  checkpoint_nskip = 10000

  ! Turn on time averaging 
  ! records time-averaged data to files ./output/*_avg.dat
  tavg_calc = .false.
  ! Set when to start time averaging (based on global simulation time step)
  tavg_nstart = 50000
  ! Set when to stop time averaging
  tavg_nend = 1000000
  ! Set number of iterations to skip between samples
  tavg_nskip = 100

  ! Turn on instantaneous recording at specified points
  point_calc = .false.
  ! Set when to start recording
  point_nstart = 1
  ! Set when to stop recording
  point_nend = 1000000
  ! Set number of iterations to skip between recordings
  point_nskip = 10
  ! Specify location of points 
  point_loc = 0.1, 0.1, 0.1 // 0.5, 0.5, 0.5 // 0.8, 0.8, 0.1

  ! Turn on instantaneous recording in entire domain
  domain_calc = .false.
  ! Set when to start recording
  domain_nstart = 50000
  ! Set when to stop recording
  domain_nend = 1000000
  ! Set number of iterations to skip between recordings
  domain_nskip = 500

  ! Turn on instantaneous recording at specified x-planes
  xplane_calc = .false.
  ! Set when to start recording
  xplane_nstart = 1
  ! Set when to stop recording
  xplane_nend = 1000000
  ! Set number of iterations to skip between recordings
  xplane_nskip = 10
  ! Specify location of planes
  xplane_loc = 0.1, 0.2, 0.3

  ! Turn on instantaneous recording at specified y-planes
  yplane_calc = .false.
  ! Set when to start recording
  yplane_nstart = 1
  ! Set when to stop recording
  yplane_nend = 1000000
  ! Set number of iterations to skip between recordings
  yplane_nskip = 10
  ! Specify location of planes
  yplane_loc = 0.1, 0.2, 0.3

  ! Turn on instantaneous recording at specified z-planes
  zplane_calc = .false.
  ! Set when to start recording
  zplane_nstart = 1
  ! Set when to stop recording
  zplane_nend = 1000000
  ! Set number of iterations to skip between recordings
  zplane_nskip = 10
  ! Specify location of planes
  zplane_loc = 0.1, 0.2, 0.3

  ! Turn on spectra calculations at specified z-planes
  spectra_calc = .false.
  ! Set when to start recording
  spectra_nstart = 1
  ! Set when to stop recording
  spectra_nend = 100000
  ! Set number of iterations to skip between samples
  spectra_nskip = 100
  ! Specify location of planes
  spectra_loc = 0.1, 0.2, 0.3
  
}

LEVEL_SET {

  ! Compute global CA (normalized force time area) based on inflow velocity
  global_CA_calc = .true.
  ! Number of time steps to skip between global CA writes
  global_CA_nskip = 10
  
  ! Forcing velocity to specified level set BC value
  ! Requires use_log_profile and/or use_enforce_un
  ! (default .false.) 
  vel_BC = .false. 

  ! Specify handling of level set boundary conditions and treatment.
  ! If unsure please use default values as they are the safest.
  ! (default = .false.)
  use_log_profile = .false.       
  ! (default = .false.)
  use_enforce_un = .false.
  ! (default = .true.)        
  physBC = .true.       
  ! (default = .true.)
  use_smooth_tau = .true. 
  ! (default = .false.)
  use_extrap_tau_log = .false.  
  ! (default = .true.)
  use_extrap_tau_simple = .true.  
  ! Only works w/interp_tau; not MPI compliant
  ! wont work w/extra_tau_log
  ! (default = .false.)
  use_modify_dutdn = .false.

  ! Enables scale dependent Cs evaluations (not dynamic evaluation)
  ! Used only when sgs_model = 4
  lag_dyn_modify_beta = .true.
  
  ! Configures the mode in which SOR smoothing is applied in the IB
  ! 'xy' may be safely used in most cases (must be used for MPI cases)
  ! '3d' not MPI compliant
  smooth_mode = 'xy'

  ! Surface roughness used for level_set surfaces (non-dimensional)
  zo_level_set = 0.0001

}

RNS_LS {

  ! Specify the number unique RNS trees
  rns_ntree = 1 
  ! Specify the layout of the RNS trees
  ! Options: 'default', 'kc-3'
  rns_tree_layout = 'default'

  !  Weighting/averaging: Off - 0, On - 1
  temporal_weight = 1
  ! Time weighting constant
  Tconst = 1.0
  ! Time step to start weighting (based on total time step)
  weight_nstart = 10000

  !  Explict - 1, Implicit - 2
  temporal_model = 1

  !  Local - 1, Global - 2
  spatial_model = 1

  output_nskip = 10
  ! Range to ramp the RNS CD (based on total time step)
  CD_ramp_nstep = 5000

  !  Parameters for setting reference regions
  alpha_width = 1.0
  alpha_dist = 0.5

  chi_cutoff = 1.0e-9

}

CYL_SKEW_LS {

  ! Angle in degrees to rotate tree. 
  ! zero degrees points in +x direction
  ! Rotates counter clockwise
  zrot_angle = -90.0

  ! Angle in degrees to 'skew' the cylindrical branches from the +z axis
  skew_angle = 45.0

  ! Create level set bottom surface 
  use_bottom_surf = .true. 
  ! Location along +z direction to create bottom surface (non-dimensional).
  z_bottom_surf = 0.2
  ! Create level set top surface
  use_top_surf = .true.
  ! Location along +z direction to create bottom surface (non-dimensional).
  z_top_surf = 7.8
  ! Create level set vertical surface
  use_right_surf = .true.
  ! Location along +y direction to create vertical surface (non-dimensional).
  y_right_surf = 0.2
  ! Create level set vertical surface
  use_left_surf = .true.
  ! Location along +y direction to create vertical surface (non-dimensional).
  y_left_surf = 7.8

  ! Locatation of the base of each tree
  tree_location = 3.14, 3.14, 0.1 // 6.28, 6.28, 0.1

  ! Number of generations for each tree
  ngen = 5
  ! Number of resolved generations
  ! When using RNS ngen_reslv < ngen; otherwise ngen_reslv = ngen
  ngen_reslv = 2
  
  ! Number of branches in generator (base structure at generation 0)
  nbranch = 3
  ! Branch diameter (non-dimensional)
  d = 0.5
  ! Branch length along its axis
  l = 1.0
  ! Radial offset to move each branch from the center of the base
  offset = 0.1

  ! Fractal scale factor ( < 1 )
  scale_fact = 0.5

  ! Filter the indicator function 
  ! Required when using CYL_SKEW_PRE_LS for generating trees for RNS
  filter_chi = .true.
  ! Size of filter (non-dimensional)
  filt_width = 0.125

}

SGS_HIST {
  
  ! Records histograms for sgs-variables (for various z-planes) * FPP FLAG
  ! records data to files ./output/hist_(varname).z-(zloc).dat
  sgs_hist_calc = .false. 
  sgs_hist_cumulative = .false.  ! if true, only use nstart and nskip below
 
  ! Set when to start binning values (base on local simulation time step
  ! and not global)
  sgs_hist_nstart = 5000
  ! Set how many time steps to skip between binning values
  sgs_hist_nskip = 3

  ! Specify locations (z-values) at which to record sgs-histogram info
  sgs_hist_loc = 0.1, 0.2, 0.3

  ! Specify bin min/max and number of bins for Cs^2 (Smagorinsky coefficient)
  cs2_bmin = 0.0
  cs2_bmax = 0.15
  cs2_nbins = 1000

  ! Specify bin min/max and number of bins for Tn (Lagrangian time-avg time scale)
  tn_bmin = 0.0
  tn_bmax = 1.0
  tn_nbins = 1000

  ! Specify bin min/max and number of bins for Nu_t (Turbulent eddy viscosity)
  nu_bmin = 0.0
  nu_bmax = 0.03
  nu_nbins = 1000

  ! Specify bin min/max and number of bins for ee (Germano identity error)
  ee_bmin = 0.0
  ee_bmax = 100
  ee_nbins = 10000

}

TURBINES {

  ! Number of turbines in the x- and y-directions
  !  this will not be used for orientation = 6
  num_x = 4
  num_y = 6

  ! Turbine dimensions, baseline diameter/height/thickness [meters]
  dia_all = 100
  height_all = 100
  thk_all = 10

  ! Placement: (all evenly spaced)
  !  1 = aligned
  !  2 = horizontally staggered
  !  3 = vertically staggered by rows (+/- stag_perc%)
  !  4 = vertically staggered checkerboard (+/- stag_perc%)
  !  5 = horizontally staggered, shifted forward for CPS simulations
  !      note: setting stag_prec to 0 will create aligned array
  !  6 = reads x, y, and z locations directly from turbine_locations.dat [meters]
  orientation = 1
  stag_perc = 50 

  ! Direction turbine is pointing
  !  theta1 is angle CCW (from above) from -x dir [degrees]
  !  theta2 is angle above horizontal
  theta1_all = 0
  theta2_all = 0

  ! Thrust coefficient (Ct and Ct')
  Ct_prime = 1.33
  Ct_noprime = 0.75

  ! Time scale for one-sided exponential filtering of u_d signal [seconds]
  !   T_avg_dim <= 0 will provide no filtering.
  T_avg_dim = 600

  ! Filtering operation, Gaussian
  !  alpha is the filter size as a multiple of the grid spacing
  !  trunc is the num of gridpoints (each side) before filter is truncated
  !  ifilter_cufoff: only include indicator values above this threshold
  alpha = 1.5
  trunc = 3
  filter_cutoff = 1e-2

  ! Set to .true. to continue using data from a previous run
  !  The running averages are written to "turbine/turbine_u_d_T.dat"
  turbine_cumulative_time=.true.

  ! The number of timesteps between the output for the turbines
  tbase = 20
}
